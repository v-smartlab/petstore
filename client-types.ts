/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/login": {
    post: {
      /** @description input */
      requestBody: {
        content: {
          "application/json": components["schemas"]["LoginInput"];
        };
      };
      responses: {
        /** @description login response */
        200: {
          content: {
            "application/json": components["schemas"]["LoginResponse"];
          };
        };
      };
    };
  };
  "/api/user/create": {
    /** @description Create a new User */
    post: operations["createUser"];
  };
  "/api/user/findUnique": {
    /** @description Find one unique User */
    get: operations["findUniqueUser"];
  };
  "/api/user/findFirst": {
    /** @description Find the first User matching the given condition */
    get: operations["findFirstUser"];
  };
  "/api/user/findMany": {
    /** @description Find a list of User */
    get: operations["findManyUser"];
  };
  "/api/user/update": {
    /** @description Update a User */
    patch: operations["updateUser"];
  };
  "/api/user/updateMany": {
    /** @description Update Users matching the given condition */
    patch: operations["updateManyUser"];
  };
  "/api/user/upsert": {
    /** @description Upsert a User */
    post: operations["upsertUser"];
  };
  "/api/user/delete": {
    /** @description Delete one unique User */
    delete: operations["deleteUser"];
  };
  "/api/user/deleteMany": {
    /** @description Delete Users matching the given condition */
    delete: operations["deleteManyUser"];
  };
  "/api/user/count": {
    /** @description Find a list of User */
    get: operations["countUser"];
  };
  "/api/user/aggregate": {
    /** @description Aggregate Users */
    get: operations["aggregateUser"];
  };
  "/api/user/groupBy": {
    /** @description Group Users by fields */
    get: operations["groupByUser"];
  };
  "/api/pet/create": {
    /** @description Create a new Pet */
    post: operations["createPet"];
  };
  "/api/pet/findUnique": {
    /** @description Find one unique Pet */
    get: operations["findUniquePet"];
  };
  "/api/pet/findFirst": {
    /** @description Find the first Pet matching the given condition */
    get: operations["findFirstPet"];
  };
  "/api/pet/findMany": {
    /** @description Find a list of Pet */
    get: operations["findManyPet"];
  };
  "/api/pet/update": {
    /** @description Update a Pet */
    patch: operations["updatePet"];
  };
  "/api/pet/updateMany": {
    /** @description Update Pets matching the given condition */
    patch: operations["updateManyPet"];
  };
  "/api/pet/upsert": {
    /** @description Upsert a Pet */
    post: operations["upsertPet"];
  };
  "/api/pet/delete": {
    /** @description Delete one unique Pet */
    delete: operations["deletePet"];
  };
  "/api/pet/deleteMany": {
    /** @description Delete Pets matching the given condition */
    delete: operations["deleteManyPet"];
  };
  "/api/pet/count": {
    /** @description Find a list of Pet */
    get: operations["countPet"];
  };
  "/api/pet/aggregate": {
    /** @description Aggregate Pets */
    get: operations["aggregatePet"];
  };
  "/api/pet/groupBy": {
    /** @description Group Pets by fields */
    get: operations["groupByPet"];
  };
  "/api/order/create": {
    /** @description Create a new Order */
    post: operations["createOrder"];
  };
  "/api/order/findUnique": {
    /** @description Find one unique Order */
    get: operations["findUniqueOrder"];
  };
  "/api/order/findFirst": {
    /** @description Find the first Order matching the given condition */
    get: operations["findFirstOrder"];
  };
  "/api/order/findMany": {
    /** @description Find a list of Order */
    get: operations["findManyOrder"];
  };
  "/api/order/update": {
    /** @description Update a Order */
    patch: operations["updateOrder"];
  };
  "/api/order/updateMany": {
    /** @description Update Orders matching the given condition */
    patch: operations["updateManyOrder"];
  };
  "/api/order/upsert": {
    /** @description Upsert a Order */
    post: operations["upsertOrder"];
  };
  "/api/order/delete": {
    /** @description Delete one unique Order */
    delete: operations["deleteOrder"];
  };
  "/api/order/deleteMany": {
    /** @description Delete Orders matching the given condition */
    delete: operations["deleteManyOrder"];
  };
  "/api/order/count": {
    /** @description Find a list of Order */
    get: operations["countOrder"];
  };
  "/api/order/aggregate": {
    /** @description Aggregate Orders */
    get: operations["aggregateOrder"];
  };
  "/api/order/groupBy": {
    /** @description Group Orders by fields */
    get: operations["groupByOrder"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Login input */
    LoginInput: {
      /** @description The email */
      email: string;
      /** @description The password */
      password: string;
    };
    /** @description Login response */
    LoginResponse: {
      /** @description The user id */
      id: string;
      /** @description The user email */
      email: string;
      /** @description The access token */
      token: string;
    };
    /** @enum {string} */
    UserScalarFieldEnum: "id" | "email" | "password";
    /** @enum {string} */
    PetScalarFieldEnum: "id" | "createdAt" | "updatedAt" | "name" | "category" | "orderId";
    /** @enum {string} */
    OrderScalarFieldEnum: "id" | "createdAt" | "updatedAt" | "userId";
    /** @enum {string} */
    SortOrder: "asc" | "desc";
    /** @enum {string} */
    NullsOrder: "first" | "last";
    User: {
      id: string;
      email: string;
      password: string;
      orders?: components["schemas"]["Order"][];
    };
    Pet: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      name: string;
      category: string;
      order?: components["schemas"]["Order"];
      orderId?: string;
    };
    Order: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      pets?: components["schemas"]["Pet"][];
      user: components["schemas"]["User"];
      userId: string;
    };
    UserWhereInput: {
      AND?: components["schemas"]["UserWhereInput"] | components["schemas"]["UserWhereInput"][];
      OR?: components["schemas"]["UserWhereInput"][];
      NOT?: components["schemas"]["UserWhereInput"] | components["schemas"]["UserWhereInput"][];
      id?: components["schemas"]["StringFilter"] | string;
      email?: components["schemas"]["StringFilter"] | string;
      password?: components["schemas"]["StringFilter"] | string;
      orders?: components["schemas"]["OrderListRelationFilter"];
    };
    UserOrderByWithRelationInput: {
      id?: components["schemas"]["SortOrder"];
      email?: components["schemas"]["SortOrder"];
      password?: components["schemas"]["SortOrder"];
      orders?: components["schemas"]["OrderOrderByRelationAggregateInput"];
    };
    UserWhereUniqueInput: {
      id?: string;
      email?: string;
      AND?: components["schemas"]["UserWhereInput"] | components["schemas"]["UserWhereInput"][];
      OR?: components["schemas"]["UserWhereInput"][];
      NOT?: components["schemas"]["UserWhereInput"] | components["schemas"]["UserWhereInput"][];
      password?: components["schemas"]["StringFilter"] | string;
      orders?: components["schemas"]["OrderListRelationFilter"];
    };
    UserScalarWhereWithAggregatesInput: {
      AND?: components["schemas"]["UserScalarWhereWithAggregatesInput"] | components["schemas"]["UserScalarWhereWithAggregatesInput"][];
      OR?: components["schemas"]["UserScalarWhereWithAggregatesInput"][];
      NOT?: components["schemas"]["UserScalarWhereWithAggregatesInput"] | components["schemas"]["UserScalarWhereWithAggregatesInput"][];
      id?: components["schemas"]["StringWithAggregatesFilter"] | string;
      email?: components["schemas"]["StringWithAggregatesFilter"] | string;
      password?: components["schemas"]["StringWithAggregatesFilter"] | string;
    };
    PetWhereInput: {
      AND?: components["schemas"]["PetWhereInput"] | components["schemas"]["PetWhereInput"][];
      OR?: components["schemas"]["PetWhereInput"][];
      NOT?: components["schemas"]["PetWhereInput"] | components["schemas"]["PetWhereInput"][];
      id?: components["schemas"]["StringFilter"] | string;
      createdAt?: components["schemas"]["DateTimeFilter"] | string;
      updatedAt?: components["schemas"]["DateTimeFilter"] | string;
      name?: components["schemas"]["StringFilter"] | string;
      category?: components["schemas"]["StringFilter"] | string;
      orderId?: components["schemas"]["StringNullableFilter"] | string;
      order?: components["schemas"]["OrderNullableRelationFilter"] | components["schemas"]["OrderWhereInput"];
    };
    PetOrderByWithRelationInput: {
      id?: components["schemas"]["SortOrder"];
      createdAt?: components["schemas"]["SortOrder"];
      updatedAt?: components["schemas"]["SortOrder"];
      name?: components["schemas"]["SortOrder"];
      category?: components["schemas"]["SortOrder"];
      orderId?: components["schemas"]["SortOrder"] | components["schemas"]["SortOrderInput"];
      order?: components["schemas"]["OrderOrderByWithRelationInput"];
    };
    PetWhereUniqueInput: {
      id?: string;
      AND?: components["schemas"]["PetWhereInput"] | components["schemas"]["PetWhereInput"][];
      OR?: components["schemas"]["PetWhereInput"][];
      NOT?: components["schemas"]["PetWhereInput"] | components["schemas"]["PetWhereInput"][];
      createdAt?: components["schemas"]["DateTimeFilter"] | string;
      updatedAt?: components["schemas"]["DateTimeFilter"] | string;
      name?: components["schemas"]["StringFilter"] | string;
      category?: components["schemas"]["StringFilter"] | string;
      orderId?: components["schemas"]["StringNullableFilter"] | string;
      order?: components["schemas"]["OrderNullableRelationFilter"] | components["schemas"]["OrderWhereInput"];
    };
    PetScalarWhereWithAggregatesInput: {
      AND?: components["schemas"]["PetScalarWhereWithAggregatesInput"] | components["schemas"]["PetScalarWhereWithAggregatesInput"][];
      OR?: components["schemas"]["PetScalarWhereWithAggregatesInput"][];
      NOT?: components["schemas"]["PetScalarWhereWithAggregatesInput"] | components["schemas"]["PetScalarWhereWithAggregatesInput"][];
      id?: components["schemas"]["StringWithAggregatesFilter"] | string;
      createdAt?: components["schemas"]["DateTimeWithAggregatesFilter"] | string;
      updatedAt?: components["schemas"]["DateTimeWithAggregatesFilter"] | string;
      name?: components["schemas"]["StringWithAggregatesFilter"] | string;
      category?: components["schemas"]["StringWithAggregatesFilter"] | string;
      orderId?: components["schemas"]["StringNullableWithAggregatesFilter"] | string;
    };
    OrderWhereInput: {
      AND?: components["schemas"]["OrderWhereInput"] | components["schemas"]["OrderWhereInput"][];
      OR?: components["schemas"]["OrderWhereInput"][];
      NOT?: components["schemas"]["OrderWhereInput"] | components["schemas"]["OrderWhereInput"][];
      id?: components["schemas"]["StringFilter"] | string;
      createdAt?: components["schemas"]["DateTimeFilter"] | string;
      updatedAt?: components["schemas"]["DateTimeFilter"] | string;
      userId?: components["schemas"]["StringFilter"] | string;
      pets?: components["schemas"]["PetListRelationFilter"];
      user?: components["schemas"]["UserRelationFilter"] | components["schemas"]["UserWhereInput"];
    };
    OrderOrderByWithRelationInput: {
      id?: components["schemas"]["SortOrder"];
      createdAt?: components["schemas"]["SortOrder"];
      updatedAt?: components["schemas"]["SortOrder"];
      userId?: components["schemas"]["SortOrder"];
      pets?: components["schemas"]["PetOrderByRelationAggregateInput"];
      user?: components["schemas"]["UserOrderByWithRelationInput"];
    };
    OrderWhereUniqueInput: {
      id?: string;
      AND?: components["schemas"]["OrderWhereInput"] | components["schemas"]["OrderWhereInput"][];
      OR?: components["schemas"]["OrderWhereInput"][];
      NOT?: components["schemas"]["OrderWhereInput"] | components["schemas"]["OrderWhereInput"][];
      createdAt?: components["schemas"]["DateTimeFilter"] | string;
      updatedAt?: components["schemas"]["DateTimeFilter"] | string;
      userId?: components["schemas"]["StringFilter"] | string;
      pets?: components["schemas"]["PetListRelationFilter"];
      user?: components["schemas"]["UserRelationFilter"] | components["schemas"]["UserWhereInput"];
    };
    OrderScalarWhereWithAggregatesInput: {
      AND?: components["schemas"]["OrderScalarWhereWithAggregatesInput"] | components["schemas"]["OrderScalarWhereWithAggregatesInput"][];
      OR?: components["schemas"]["OrderScalarWhereWithAggregatesInput"][];
      NOT?: components["schemas"]["OrderScalarWhereWithAggregatesInput"] | components["schemas"]["OrderScalarWhereWithAggregatesInput"][];
      id?: components["schemas"]["StringWithAggregatesFilter"] | string;
      createdAt?: components["schemas"]["DateTimeWithAggregatesFilter"] | string;
      updatedAt?: components["schemas"]["DateTimeWithAggregatesFilter"] | string;
      userId?: components["schemas"]["StringWithAggregatesFilter"] | string;
    };
    UserCreateInput: {
      id?: string;
      email: string;
      password: string;
      orders?: components["schemas"]["OrderCreateNestedManyWithoutUserInput"];
    };
    UserUpdateInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      email?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      password?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      orders?: components["schemas"]["OrderUpdateManyWithoutUserNestedInput"];
    };
    UserUpdateManyMutationInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      email?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      password?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
    };
    PetCreateInput: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name: string;
      category: string;
      order?: components["schemas"]["OrderCreateNestedOneWithoutPetsInput"];
    };
    PetUpdateInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      category?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      order?: components["schemas"]["OrderUpdateOneWithoutPetsNestedInput"];
    };
    PetUpdateManyMutationInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      category?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
    };
    OrderCreateInput: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      pets?: components["schemas"]["PetCreateNestedManyWithoutOrderInput"];
      user: components["schemas"]["UserCreateNestedOneWithoutOrdersInput"];
    };
    OrderUpdateInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      pets?: components["schemas"]["PetUpdateManyWithoutOrderNestedInput"];
      user?: components["schemas"]["UserUpdateOneRequiredWithoutOrdersNestedInput"];
    };
    OrderUpdateManyMutationInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
    };
    StringFilter: {
      equals?: string;
      in?: string[];
      notIn?: string[];
      lt?: string;
      lte?: string;
      gt?: string;
      gte?: string;
      contains?: string;
      startsWith?: string;
      endsWith?: string;
      not?: string | components["schemas"]["NestedStringFilter"];
    };
    OrderListRelationFilter: {
      every?: components["schemas"]["OrderWhereInput"];
      some?: components["schemas"]["OrderWhereInput"];
      none?: components["schemas"]["OrderWhereInput"];
    };
    OrderOrderByRelationAggregateInput: {
      _count?: components["schemas"]["SortOrder"];
    };
    StringWithAggregatesFilter: {
      equals?: string;
      in?: string[];
      notIn?: string[];
      lt?: string;
      lte?: string;
      gt?: string;
      gte?: string;
      contains?: string;
      startsWith?: string;
      endsWith?: string;
      not?: string | components["schemas"]["NestedStringWithAggregatesFilter"];
      _count?: components["schemas"]["NestedIntFilter"];
      _min?: components["schemas"]["NestedStringFilter"];
      _max?: components["schemas"]["NestedStringFilter"];
    };
    DateTimeFilter: {
      /** Format: date-time */
      equals?: string;
      in?: string[];
      notIn?: string[];
      /** Format: date-time */
      lt?: string;
      /** Format: date-time */
      lte?: string;
      /** Format: date-time */
      gt?: string;
      /** Format: date-time */
      gte?: string;
      not?: string | components["schemas"]["NestedDateTimeFilter"];
    };
    StringNullableFilter: {
      equals?: string;
      in?: string[];
      notIn?: string[];
      lt?: string;
      lte?: string;
      gt?: string;
      gte?: string;
      contains?: string;
      startsWith?: string;
      endsWith?: string;
      not?: string | components["schemas"]["NestedStringNullableFilter"];
    };
    OrderNullableRelationFilter: {
      is?: components["schemas"]["OrderWhereInput"];
      isNot?: components["schemas"]["OrderWhereInput"];
    };
    SortOrderInput: {
      sort: components["schemas"]["SortOrder"];
      nulls?: components["schemas"]["NullsOrder"];
    };
    DateTimeWithAggregatesFilter: {
      /** Format: date-time */
      equals?: string;
      in?: string[];
      notIn?: string[];
      /** Format: date-time */
      lt?: string;
      /** Format: date-time */
      lte?: string;
      /** Format: date-time */
      gt?: string;
      /** Format: date-time */
      gte?: string;
      not?: string | components["schemas"]["NestedDateTimeWithAggregatesFilter"];
      _count?: components["schemas"]["NestedIntFilter"];
      _min?: components["schemas"]["NestedDateTimeFilter"];
      _max?: components["schemas"]["NestedDateTimeFilter"];
    };
    StringNullableWithAggregatesFilter: {
      equals?: string;
      in?: string[];
      notIn?: string[];
      lt?: string;
      lte?: string;
      gt?: string;
      gte?: string;
      contains?: string;
      startsWith?: string;
      endsWith?: string;
      not?: string | components["schemas"]["NestedStringNullableWithAggregatesFilter"];
      _count?: components["schemas"]["NestedIntNullableFilter"];
      _min?: components["schemas"]["NestedStringNullableFilter"];
      _max?: components["schemas"]["NestedStringNullableFilter"];
    };
    PetListRelationFilter: {
      every?: components["schemas"]["PetWhereInput"];
      some?: components["schemas"]["PetWhereInput"];
      none?: components["schemas"]["PetWhereInput"];
    };
    UserRelationFilter: {
      is?: components["schemas"]["UserWhereInput"];
      isNot?: components["schemas"]["UserWhereInput"];
    };
    PetOrderByRelationAggregateInput: {
      _count?: components["schemas"]["SortOrder"];
    };
    OrderCreateNestedManyWithoutUserInput: {
      create?: components["schemas"]["OrderCreateWithoutUserInput"] | components["schemas"]["OrderCreateWithoutUserInput"][] | components["schemas"]["OrderUncheckedCreateWithoutUserInput"] | components["schemas"]["OrderUncheckedCreateWithoutUserInput"][];
      connectOrCreate?: components["schemas"]["OrderCreateOrConnectWithoutUserInput"] | components["schemas"]["OrderCreateOrConnectWithoutUserInput"][];
      connect?: components["schemas"]["OrderWhereUniqueInput"] | components["schemas"]["OrderWhereUniqueInput"][];
    };
    StringFieldUpdateOperationsInput: {
      set?: string;
    };
    OrderUpdateManyWithoutUserNestedInput: {
      create?: components["schemas"]["OrderCreateWithoutUserInput"] | components["schemas"]["OrderCreateWithoutUserInput"][] | components["schemas"]["OrderUncheckedCreateWithoutUserInput"] | components["schemas"]["OrderUncheckedCreateWithoutUserInput"][];
      connectOrCreate?: components["schemas"]["OrderCreateOrConnectWithoutUserInput"] | components["schemas"]["OrderCreateOrConnectWithoutUserInput"][];
      upsert?: components["schemas"]["OrderUpsertWithWhereUniqueWithoutUserInput"] | components["schemas"]["OrderUpsertWithWhereUniqueWithoutUserInput"][];
      set?: components["schemas"]["OrderWhereUniqueInput"] | components["schemas"]["OrderWhereUniqueInput"][];
      disconnect?: components["schemas"]["OrderWhereUniqueInput"] | components["schemas"]["OrderWhereUniqueInput"][];
      delete?: components["schemas"]["OrderWhereUniqueInput"] | components["schemas"]["OrderWhereUniqueInput"][];
      connect?: components["schemas"]["OrderWhereUniqueInput"] | components["schemas"]["OrderWhereUniqueInput"][];
      update?: components["schemas"]["OrderUpdateWithWhereUniqueWithoutUserInput"] | components["schemas"]["OrderUpdateWithWhereUniqueWithoutUserInput"][];
      updateMany?: components["schemas"]["OrderUpdateManyWithWhereWithoutUserInput"] | components["schemas"]["OrderUpdateManyWithWhereWithoutUserInput"][];
      deleteMany?: components["schemas"]["OrderScalarWhereInput"] | components["schemas"]["OrderScalarWhereInput"][];
    };
    OrderCreateNestedOneWithoutPetsInput: {
      create?: components["schemas"]["OrderCreateWithoutPetsInput"] | components["schemas"]["OrderUncheckedCreateWithoutPetsInput"];
      connectOrCreate?: components["schemas"]["OrderCreateOrConnectWithoutPetsInput"];
      connect?: components["schemas"]["OrderWhereUniqueInput"];
    };
    DateTimeFieldUpdateOperationsInput: {
      /** Format: date-time */
      set?: string;
    };
    OrderUpdateOneWithoutPetsNestedInput: {
      create?: components["schemas"]["OrderCreateWithoutPetsInput"] | components["schemas"]["OrderUncheckedCreateWithoutPetsInput"];
      connectOrCreate?: components["schemas"]["OrderCreateOrConnectWithoutPetsInput"];
      upsert?: components["schemas"]["OrderUpsertWithoutPetsInput"];
      disconnect?: boolean | components["schemas"]["OrderWhereInput"];
      delete?: boolean | components["schemas"]["OrderWhereInput"];
      connect?: components["schemas"]["OrderWhereUniqueInput"];
      update?: components["schemas"]["OrderUpdateToOneWithWhereWithoutPetsInput"] | components["schemas"]["OrderUpdateWithoutPetsInput"] | components["schemas"]["OrderUncheckedUpdateWithoutPetsInput"];
    };
    PetCreateNestedManyWithoutOrderInput: {
      create?: components["schemas"]["PetCreateWithoutOrderInput"] | components["schemas"]["PetCreateWithoutOrderInput"][] | components["schemas"]["PetUncheckedCreateWithoutOrderInput"] | components["schemas"]["PetUncheckedCreateWithoutOrderInput"][];
      connectOrCreate?: components["schemas"]["PetCreateOrConnectWithoutOrderInput"] | components["schemas"]["PetCreateOrConnectWithoutOrderInput"][];
      connect?: components["schemas"]["PetWhereUniqueInput"] | components["schemas"]["PetWhereUniqueInput"][];
    };
    UserCreateNestedOneWithoutOrdersInput: {
      create?: components["schemas"]["UserCreateWithoutOrdersInput"] | components["schemas"]["UserUncheckedCreateWithoutOrdersInput"];
      connectOrCreate?: components["schemas"]["UserCreateOrConnectWithoutOrdersInput"];
      connect?: components["schemas"]["UserWhereUniqueInput"];
    };
    PetUncheckedCreateNestedManyWithoutOrderInput: {
      create?: components["schemas"]["PetCreateWithoutOrderInput"] | components["schemas"]["PetCreateWithoutOrderInput"][] | components["schemas"]["PetUncheckedCreateWithoutOrderInput"] | components["schemas"]["PetUncheckedCreateWithoutOrderInput"][];
      connectOrCreate?: components["schemas"]["PetCreateOrConnectWithoutOrderInput"] | components["schemas"]["PetCreateOrConnectWithoutOrderInput"][];
      connect?: components["schemas"]["PetWhereUniqueInput"] | components["schemas"]["PetWhereUniqueInput"][];
    };
    PetUpdateManyWithoutOrderNestedInput: {
      create?: components["schemas"]["PetCreateWithoutOrderInput"] | components["schemas"]["PetCreateWithoutOrderInput"][] | components["schemas"]["PetUncheckedCreateWithoutOrderInput"] | components["schemas"]["PetUncheckedCreateWithoutOrderInput"][];
      connectOrCreate?: components["schemas"]["PetCreateOrConnectWithoutOrderInput"] | components["schemas"]["PetCreateOrConnectWithoutOrderInput"][];
      upsert?: components["schemas"]["PetUpsertWithWhereUniqueWithoutOrderInput"] | components["schemas"]["PetUpsertWithWhereUniqueWithoutOrderInput"][];
      set?: components["schemas"]["PetWhereUniqueInput"] | components["schemas"]["PetWhereUniqueInput"][];
      disconnect?: components["schemas"]["PetWhereUniqueInput"] | components["schemas"]["PetWhereUniqueInput"][];
      delete?: components["schemas"]["PetWhereUniqueInput"] | components["schemas"]["PetWhereUniqueInput"][];
      connect?: components["schemas"]["PetWhereUniqueInput"] | components["schemas"]["PetWhereUniqueInput"][];
      update?: components["schemas"]["PetUpdateWithWhereUniqueWithoutOrderInput"] | components["schemas"]["PetUpdateWithWhereUniqueWithoutOrderInput"][];
      updateMany?: components["schemas"]["PetUpdateManyWithWhereWithoutOrderInput"] | components["schemas"]["PetUpdateManyWithWhereWithoutOrderInput"][];
      deleteMany?: components["schemas"]["PetScalarWhereInput"] | components["schemas"]["PetScalarWhereInput"][];
    };
    UserUpdateOneRequiredWithoutOrdersNestedInput: {
      create?: components["schemas"]["UserCreateWithoutOrdersInput"] | components["schemas"]["UserUncheckedCreateWithoutOrdersInput"];
      connectOrCreate?: components["schemas"]["UserCreateOrConnectWithoutOrdersInput"];
      upsert?: components["schemas"]["UserUpsertWithoutOrdersInput"];
      connect?: components["schemas"]["UserWhereUniqueInput"];
      update?: components["schemas"]["UserUpdateToOneWithWhereWithoutOrdersInput"] | components["schemas"]["UserUpdateWithoutOrdersInput"] | components["schemas"]["UserUncheckedUpdateWithoutOrdersInput"];
    };
    PetUncheckedUpdateManyWithoutOrderNestedInput: {
      create?: components["schemas"]["PetCreateWithoutOrderInput"] | components["schemas"]["PetCreateWithoutOrderInput"][] | components["schemas"]["PetUncheckedCreateWithoutOrderInput"] | components["schemas"]["PetUncheckedCreateWithoutOrderInput"][];
      connectOrCreate?: components["schemas"]["PetCreateOrConnectWithoutOrderInput"] | components["schemas"]["PetCreateOrConnectWithoutOrderInput"][];
      upsert?: components["schemas"]["PetUpsertWithWhereUniqueWithoutOrderInput"] | components["schemas"]["PetUpsertWithWhereUniqueWithoutOrderInput"][];
      set?: components["schemas"]["PetWhereUniqueInput"] | components["schemas"]["PetWhereUniqueInput"][];
      disconnect?: components["schemas"]["PetWhereUniqueInput"] | components["schemas"]["PetWhereUniqueInput"][];
      delete?: components["schemas"]["PetWhereUniqueInput"] | components["schemas"]["PetWhereUniqueInput"][];
      connect?: components["schemas"]["PetWhereUniqueInput"] | components["schemas"]["PetWhereUniqueInput"][];
      update?: components["schemas"]["PetUpdateWithWhereUniqueWithoutOrderInput"] | components["schemas"]["PetUpdateWithWhereUniqueWithoutOrderInput"][];
      updateMany?: components["schemas"]["PetUpdateManyWithWhereWithoutOrderInput"] | components["schemas"]["PetUpdateManyWithWhereWithoutOrderInput"][];
      deleteMany?: components["schemas"]["PetScalarWhereInput"] | components["schemas"]["PetScalarWhereInput"][];
    };
    NestedStringFilter: {
      equals?: string;
      in?: string[];
      notIn?: string[];
      lt?: string;
      lte?: string;
      gt?: string;
      gte?: string;
      contains?: string;
      startsWith?: string;
      endsWith?: string;
      not?: string | components["schemas"]["NestedStringFilter"];
    };
    NestedStringWithAggregatesFilter: {
      equals?: string;
      in?: string[];
      notIn?: string[];
      lt?: string;
      lte?: string;
      gt?: string;
      gte?: string;
      contains?: string;
      startsWith?: string;
      endsWith?: string;
      not?: string | components["schemas"]["NestedStringWithAggregatesFilter"];
      _count?: components["schemas"]["NestedIntFilter"];
      _min?: components["schemas"]["NestedStringFilter"];
      _max?: components["schemas"]["NestedStringFilter"];
    };
    NestedIntFilter: {
      equals?: number;
      in?: number[];
      notIn?: number[];
      lt?: number;
      lte?: number;
      gt?: number;
      gte?: number;
      not?: number | components["schemas"]["NestedIntFilter"];
    };
    NestedDateTimeFilter: {
      /** Format: date-time */
      equals?: string;
      in?: string[];
      notIn?: string[];
      /** Format: date-time */
      lt?: string;
      /** Format: date-time */
      lte?: string;
      /** Format: date-time */
      gt?: string;
      /** Format: date-time */
      gte?: string;
      not?: string | components["schemas"]["NestedDateTimeFilter"];
    };
    NestedStringNullableFilter: {
      equals?: string;
      in?: string[];
      notIn?: string[];
      lt?: string;
      lte?: string;
      gt?: string;
      gte?: string;
      contains?: string;
      startsWith?: string;
      endsWith?: string;
      not?: string | components["schemas"]["NestedStringNullableFilter"];
    };
    NestedDateTimeWithAggregatesFilter: {
      /** Format: date-time */
      equals?: string;
      in?: string[];
      notIn?: string[];
      /** Format: date-time */
      lt?: string;
      /** Format: date-time */
      lte?: string;
      /** Format: date-time */
      gt?: string;
      /** Format: date-time */
      gte?: string;
      not?: string | components["schemas"]["NestedDateTimeWithAggregatesFilter"];
      _count?: components["schemas"]["NestedIntFilter"];
      _min?: components["schemas"]["NestedDateTimeFilter"];
      _max?: components["schemas"]["NestedDateTimeFilter"];
    };
    NestedStringNullableWithAggregatesFilter: {
      equals?: string;
      in?: string[];
      notIn?: string[];
      lt?: string;
      lte?: string;
      gt?: string;
      gte?: string;
      contains?: string;
      startsWith?: string;
      endsWith?: string;
      not?: string | components["schemas"]["NestedStringNullableWithAggregatesFilter"];
      _count?: components["schemas"]["NestedIntNullableFilter"];
      _min?: components["schemas"]["NestedStringNullableFilter"];
      _max?: components["schemas"]["NestedStringNullableFilter"];
    };
    NestedIntNullableFilter: {
      equals?: number;
      in?: number[];
      notIn?: number[];
      lt?: number;
      lte?: number;
      gt?: number;
      gte?: number;
      not?: number | components["schemas"]["NestedIntNullableFilter"];
    };
    OrderCreateWithoutUserInput: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      pets?: components["schemas"]["PetCreateNestedManyWithoutOrderInput"];
    };
    OrderUncheckedCreateWithoutUserInput: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      pets?: components["schemas"]["PetUncheckedCreateNestedManyWithoutOrderInput"];
    };
    OrderCreateOrConnectWithoutUserInput: {
      where: components["schemas"]["OrderWhereUniqueInput"];
      create: components["schemas"]["OrderCreateWithoutUserInput"] | components["schemas"]["OrderUncheckedCreateWithoutUserInput"];
    };
    OrderUpsertWithWhereUniqueWithoutUserInput: {
      where: components["schemas"]["OrderWhereUniqueInput"];
      update: components["schemas"]["OrderUpdateWithoutUserInput"] | components["schemas"]["OrderUncheckedUpdateWithoutUserInput"];
      create: components["schemas"]["OrderCreateWithoutUserInput"] | components["schemas"]["OrderUncheckedCreateWithoutUserInput"];
    };
    OrderUpdateWithWhereUniqueWithoutUserInput: {
      where: components["schemas"]["OrderWhereUniqueInput"];
      data: components["schemas"]["OrderUpdateWithoutUserInput"] | components["schemas"]["OrderUncheckedUpdateWithoutUserInput"];
    };
    OrderUpdateManyWithWhereWithoutUserInput: {
      where: components["schemas"]["OrderScalarWhereInput"];
      data: components["schemas"]["OrderUpdateManyMutationInput"] | components["schemas"]["OrderUncheckedUpdateManyWithoutUserInput"];
    };
    OrderScalarWhereInput: {
      AND?: components["schemas"]["OrderScalarWhereInput"] | components["schemas"]["OrderScalarWhereInput"][];
      OR?: components["schemas"]["OrderScalarWhereInput"][];
      NOT?: components["schemas"]["OrderScalarWhereInput"] | components["schemas"]["OrderScalarWhereInput"][];
      id?: components["schemas"]["StringFilter"] | string;
      createdAt?: components["schemas"]["DateTimeFilter"] | string;
      updatedAt?: components["schemas"]["DateTimeFilter"] | string;
      userId?: components["schemas"]["StringFilter"] | string;
    };
    OrderCreateWithoutPetsInput: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      user: components["schemas"]["UserCreateNestedOneWithoutOrdersInput"];
    };
    OrderUncheckedCreateWithoutPetsInput: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      userId: string;
    };
    OrderCreateOrConnectWithoutPetsInput: {
      where: components["schemas"]["OrderWhereUniqueInput"];
      create: components["schemas"]["OrderCreateWithoutPetsInput"] | components["schemas"]["OrderUncheckedCreateWithoutPetsInput"];
    };
    OrderUpsertWithoutPetsInput: {
      update: components["schemas"]["OrderUpdateWithoutPetsInput"] | components["schemas"]["OrderUncheckedUpdateWithoutPetsInput"];
      create: components["schemas"]["OrderCreateWithoutPetsInput"] | components["schemas"]["OrderUncheckedCreateWithoutPetsInput"];
      where?: components["schemas"]["OrderWhereInput"];
    };
    OrderUpdateToOneWithWhereWithoutPetsInput: {
      where?: components["schemas"]["OrderWhereInput"];
      data: components["schemas"]["OrderUpdateWithoutPetsInput"] | components["schemas"]["OrderUncheckedUpdateWithoutPetsInput"];
    };
    OrderUpdateWithoutPetsInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      user?: components["schemas"]["UserUpdateOneRequiredWithoutOrdersNestedInput"];
    };
    OrderUncheckedUpdateWithoutPetsInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      userId?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
    };
    PetCreateWithoutOrderInput: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name: string;
      category: string;
    };
    PetUncheckedCreateWithoutOrderInput: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name: string;
      category: string;
    };
    PetCreateOrConnectWithoutOrderInput: {
      where: components["schemas"]["PetWhereUniqueInput"];
      create: components["schemas"]["PetCreateWithoutOrderInput"] | components["schemas"]["PetUncheckedCreateWithoutOrderInput"];
    };
    UserCreateWithoutOrdersInput: {
      id?: string;
      email: string;
      password: string;
    };
    UserUncheckedCreateWithoutOrdersInput: {
      id?: string;
      email: string;
      password: string;
    };
    UserCreateOrConnectWithoutOrdersInput: {
      where: components["schemas"]["UserWhereUniqueInput"];
      create: components["schemas"]["UserCreateWithoutOrdersInput"] | components["schemas"]["UserUncheckedCreateWithoutOrdersInput"];
    };
    PetUpsertWithWhereUniqueWithoutOrderInput: {
      where: components["schemas"]["PetWhereUniqueInput"];
      update: components["schemas"]["PetUpdateWithoutOrderInput"] | components["schemas"]["PetUncheckedUpdateWithoutOrderInput"];
      create: components["schemas"]["PetCreateWithoutOrderInput"] | components["schemas"]["PetUncheckedCreateWithoutOrderInput"];
    };
    PetUpdateWithWhereUniqueWithoutOrderInput: {
      where: components["schemas"]["PetWhereUniqueInput"];
      data: components["schemas"]["PetUpdateWithoutOrderInput"] | components["schemas"]["PetUncheckedUpdateWithoutOrderInput"];
    };
    PetUpdateManyWithWhereWithoutOrderInput: {
      where: components["schemas"]["PetScalarWhereInput"];
      data: components["schemas"]["PetUpdateManyMutationInput"] | components["schemas"]["PetUncheckedUpdateManyWithoutOrderInput"];
    };
    PetScalarWhereInput: {
      AND?: components["schemas"]["PetScalarWhereInput"] | components["schemas"]["PetScalarWhereInput"][];
      OR?: components["schemas"]["PetScalarWhereInput"][];
      NOT?: components["schemas"]["PetScalarWhereInput"] | components["schemas"]["PetScalarWhereInput"][];
      id?: components["schemas"]["StringFilter"] | string;
      createdAt?: components["schemas"]["DateTimeFilter"] | string;
      updatedAt?: components["schemas"]["DateTimeFilter"] | string;
      name?: components["schemas"]["StringFilter"] | string;
      category?: components["schemas"]["StringFilter"] | string;
      orderId?: components["schemas"]["StringNullableFilter"] | string;
    };
    UserUpsertWithoutOrdersInput: {
      update: components["schemas"]["UserUpdateWithoutOrdersInput"] | components["schemas"]["UserUncheckedUpdateWithoutOrdersInput"];
      create: components["schemas"]["UserCreateWithoutOrdersInput"] | components["schemas"]["UserUncheckedCreateWithoutOrdersInput"];
      where?: components["schemas"]["UserWhereInput"];
    };
    UserUpdateToOneWithWhereWithoutOrdersInput: {
      where?: components["schemas"]["UserWhereInput"];
      data: components["schemas"]["UserUpdateWithoutOrdersInput"] | components["schemas"]["UserUncheckedUpdateWithoutOrdersInput"];
    };
    UserUpdateWithoutOrdersInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      email?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      password?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
    };
    UserUncheckedUpdateWithoutOrdersInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      email?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      password?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
    };
    OrderUpdateWithoutUserInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      pets?: components["schemas"]["PetUpdateManyWithoutOrderNestedInput"];
    };
    OrderUncheckedUpdateWithoutUserInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      pets?: components["schemas"]["PetUncheckedUpdateManyWithoutOrderNestedInput"];
    };
    OrderUncheckedUpdateManyWithoutUserInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
    };
    PetUpdateWithoutOrderInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      category?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
    };
    PetUncheckedUpdateWithoutOrderInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      category?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
    };
    PetUncheckedUpdateManyWithoutOrderInput: {
      id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
      name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
      category?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
    };
    UserArgs: {
      select?: components["schemas"]["UserSelect"];
      include?: components["schemas"]["UserInclude"];
    };
    OrderArgs: {
      select?: components["schemas"]["OrderSelect"];
      include?: components["schemas"]["OrderInclude"];
    };
    UserInclude: {
      orders?: boolean | components["schemas"]["OrderFindManyArgs"];
      _count?: boolean | components["schemas"]["UserCountOutputTypeArgs"];
    };
    PetInclude: {
      order?: boolean | components["schemas"]["OrderArgs"];
    };
    OrderInclude: {
      pets?: boolean | components["schemas"]["PetFindManyArgs"];
      user?: boolean | components["schemas"]["UserArgs"];
      _count?: boolean | components["schemas"]["OrderCountOutputTypeArgs"];
    };
    UserCountOutputTypeSelect: {
      orders?: boolean;
    };
    OrderCountOutputTypeSelect: {
      pets?: boolean;
    };
    UserCountOutputTypeArgs: {
      select?: components["schemas"]["UserCountOutputTypeSelect"];
    };
    OrderCountOutputTypeArgs: {
      select?: components["schemas"]["OrderCountOutputTypeSelect"];
    };
    UserSelect: {
      id?: boolean;
      email?: boolean;
      password?: boolean;
      orders?: boolean | components["schemas"]["OrderFindManyArgs"];
      _count?: boolean | components["schemas"]["UserCountOutputTypeArgs"];
    };
    PetSelect: {
      id?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      name?: boolean;
      category?: boolean;
      order?: boolean | components["schemas"]["OrderArgs"];
      orderId?: boolean;
    };
    OrderSelect: {
      id?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      pets?: boolean | components["schemas"]["PetFindManyArgs"];
      user?: boolean | components["schemas"]["UserArgs"];
      userId?: boolean;
      _count?: boolean | components["schemas"]["OrderCountOutputTypeArgs"];
    };
    UserCountAggregateInput: {
      id?: boolean;
      email?: boolean;
      password?: boolean;
      _all?: boolean;
    };
    UserMinAggregateInput: {
      id?: boolean;
      email?: boolean;
      password?: boolean;
    };
    UserMaxAggregateInput: {
      id?: boolean;
      email?: boolean;
      password?: boolean;
    };
    PetCountAggregateInput: {
      id?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      name?: boolean;
      category?: boolean;
      orderId?: boolean;
      _all?: boolean;
    };
    PetMinAggregateInput: {
      id?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      name?: boolean;
      category?: boolean;
      orderId?: boolean;
    };
    PetMaxAggregateInput: {
      id?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      name?: boolean;
      category?: boolean;
      orderId?: boolean;
    };
    OrderCountAggregateInput: {
      id?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      userId?: boolean;
      _all?: boolean;
    };
    OrderMinAggregateInput: {
      id?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      userId?: boolean;
    };
    OrderMaxAggregateInput: {
      id?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      userId?: boolean;
    };
    AggregateUser: {
      _count?: components["schemas"]["UserCountAggregateOutputType"];
      _min?: components["schemas"]["UserMinAggregateOutputType"];
      _max?: components["schemas"]["UserMaxAggregateOutputType"];
    };
    UserGroupByOutputType: {
      id: string;
      email: string;
      password: string;
      _count?: components["schemas"]["UserCountAggregateOutputType"];
      _min?: components["schemas"]["UserMinAggregateOutputType"];
      _max?: components["schemas"]["UserMaxAggregateOutputType"];
    };
    AggregatePet: {
      _count?: components["schemas"]["PetCountAggregateOutputType"];
      _min?: components["schemas"]["PetMinAggregateOutputType"];
      _max?: components["schemas"]["PetMaxAggregateOutputType"];
    };
    PetGroupByOutputType: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      name: string;
      category: string;
      orderId?: string;
      _count?: components["schemas"]["PetCountAggregateOutputType"];
      _min?: components["schemas"]["PetMinAggregateOutputType"];
      _max?: components["schemas"]["PetMaxAggregateOutputType"];
    };
    AggregateOrder: {
      _count?: components["schemas"]["OrderCountAggregateOutputType"];
      _min?: components["schemas"]["OrderMinAggregateOutputType"];
      _max?: components["schemas"]["OrderMaxAggregateOutputType"];
    };
    OrderGroupByOutputType: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      userId: string;
      _count?: components["schemas"]["OrderCountAggregateOutputType"];
      _min?: components["schemas"]["OrderMinAggregateOutputType"];
      _max?: components["schemas"]["OrderMaxAggregateOutputType"];
    };
    UserCountAggregateOutputType: {
      id: number;
      email: number;
      password: number;
      _all: number;
    };
    UserMinAggregateOutputType: {
      id?: string;
      email?: string;
      password?: string;
    };
    UserMaxAggregateOutputType: {
      id?: string;
      email?: string;
      password?: string;
    };
    PetCountAggregateOutputType: {
      id: number;
      createdAt: number;
      updatedAt: number;
      name: number;
      category: number;
      orderId: number;
      _all: number;
    };
    PetMinAggregateOutputType: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      category?: string;
      orderId?: string;
    };
    PetMaxAggregateOutputType: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      category?: string;
      orderId?: string;
    };
    OrderCountAggregateOutputType: {
      id: number;
      createdAt: number;
      updatedAt: number;
      userId: number;
      _all: number;
    };
    OrderMinAggregateOutputType: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      userId?: string;
    };
    OrderMaxAggregateOutputType: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      userId?: string;
    };
    _Meta: {
      /** @description Meta information about the request or response */
      meta?: {
        /** @description Serialization metadata */
        serialization?: unknown;
        [key: string]: unknown;
      };
    };
    _Error: {
      error: {
        /** @description Indicates if the error occurred during a Prisma call */
        prisma?: boolean;
        /** @description Indicates if the error was due to rejection by a policy */
        rejectedByPolicy?: boolean;
        /** @description Prisma error code. Only available when "prisma" field is true. */
        code?: string;
        /** @description Error message */
        message: string;
        /** @description Detailed error reason */
        reason?: string;
        /** @description Zod validation errors if the error is due to data validation failure */
        zodErrors?: {
          [key: string]: unknown;
        };
        [key: string]: unknown;
      };
    };
    BatchPayload: {
      count?: number;
    };
    UserCreateArgs: {
      select?: components["schemas"]["UserSelect"];
      include?: components["schemas"]["UserInclude"];
      data: components["schemas"]["UserCreateInput"];
      meta?: components["schemas"]["_Meta"];
    };
    UserFindUniqueArgs: {
      select?: components["schemas"]["UserSelect"];
      include?: components["schemas"]["UserInclude"];
      where: components["schemas"]["UserWhereUniqueInput"];
      meta?: components["schemas"]["_Meta"];
    };
    UserFindFirstArgs: {
      select?: components["schemas"]["UserSelect"];
      include?: components["schemas"]["UserInclude"];
      where?: components["schemas"]["UserWhereInput"];
      meta?: components["schemas"]["_Meta"];
    };
    UserFindManyArgs: {
      select?: components["schemas"]["UserSelect"];
      include?: components["schemas"]["UserInclude"];
      where?: components["schemas"]["UserWhereInput"];
      meta?: components["schemas"]["_Meta"];
    };
    UserUpdateArgs: {
      select?: components["schemas"]["UserSelect"];
      include?: components["schemas"]["UserInclude"];
      where: components["schemas"]["UserWhereUniqueInput"];
      data: components["schemas"]["UserUpdateInput"];
      meta?: components["schemas"]["_Meta"];
    };
    UserUpdateManyArgs: {
      where?: components["schemas"]["UserWhereInput"];
      data: components["schemas"]["UserUpdateManyMutationInput"];
      meta?: components["schemas"]["_Meta"];
    };
    UserUpsertArgs: {
      select?: components["schemas"]["UserSelect"];
      include?: components["schemas"]["UserInclude"];
      where: components["schemas"]["UserWhereUniqueInput"];
      create: components["schemas"]["UserCreateInput"];
      update: components["schemas"]["UserUpdateInput"];
      meta?: components["schemas"]["_Meta"];
    };
    UserDeleteUniqueArgs: {
      select?: components["schemas"]["UserSelect"];
      include?: components["schemas"]["UserInclude"];
      where: components["schemas"]["UserWhereUniqueInput"];
      meta?: components["schemas"]["_Meta"];
    };
    UserDeleteManyArgs: {
      where?: components["schemas"]["UserWhereInput"];
      meta?: components["schemas"]["_Meta"];
    };
    UserCountArgs: {
      select?: components["schemas"]["UserSelect"];
      where?: components["schemas"]["UserWhereInput"];
      meta?: components["schemas"]["_Meta"];
    };
    UserAggregateArgs: {
      where?: components["schemas"]["UserWhereInput"];
      orderBy?: components["schemas"]["UserOrderByWithRelationInput"];
      cursor?: components["schemas"]["UserWhereUniqueInput"];
      take?: number;
      skip?: number;
      _count?: boolean | components["schemas"]["UserCountAggregateInput"];
      _min?: components["schemas"]["UserMinAggregateInput"];
      _max?: components["schemas"]["UserMaxAggregateInput"];
      meta?: components["schemas"]["_Meta"];
    };
    UserGroupByArgs: {
      where?: components["schemas"]["UserWhereInput"];
      orderBy?: components["schemas"]["UserOrderByWithRelationInput"];
      by?: components["schemas"]["UserScalarFieldEnum"];
      having?: components["schemas"]["UserScalarWhereWithAggregatesInput"];
      take?: number;
      skip?: number;
      _count?: boolean | components["schemas"]["UserCountAggregateInput"];
      _min?: components["schemas"]["UserMinAggregateInput"];
      _max?: components["schemas"]["UserMaxAggregateInput"];
      meta?: components["schemas"]["_Meta"];
    };
    PetCreateArgs: {
      select?: components["schemas"]["PetSelect"];
      include?: components["schemas"]["PetInclude"];
      data: components["schemas"]["PetCreateInput"];
      meta?: components["schemas"]["_Meta"];
    };
    PetFindUniqueArgs: {
      select?: components["schemas"]["PetSelect"];
      include?: components["schemas"]["PetInclude"];
      where: components["schemas"]["PetWhereUniqueInput"];
      meta?: components["schemas"]["_Meta"];
    };
    PetFindFirstArgs: {
      select?: components["schemas"]["PetSelect"];
      include?: components["schemas"]["PetInclude"];
      where?: components["schemas"]["PetWhereInput"];
      meta?: components["schemas"]["_Meta"];
    };
    PetFindManyArgs: {
      select?: components["schemas"]["PetSelect"];
      include?: components["schemas"]["PetInclude"];
      where?: components["schemas"]["PetWhereInput"];
      meta?: components["schemas"]["_Meta"];
    };
    PetUpdateArgs: {
      select?: components["schemas"]["PetSelect"];
      include?: components["schemas"]["PetInclude"];
      where: components["schemas"]["PetWhereUniqueInput"];
      data: components["schemas"]["PetUpdateInput"];
      meta?: components["schemas"]["_Meta"];
    };
    PetUpdateManyArgs: {
      where?: components["schemas"]["PetWhereInput"];
      data: components["schemas"]["PetUpdateManyMutationInput"];
      meta?: components["schemas"]["_Meta"];
    };
    PetUpsertArgs: {
      select?: components["schemas"]["PetSelect"];
      include?: components["schemas"]["PetInclude"];
      where: components["schemas"]["PetWhereUniqueInput"];
      create: components["schemas"]["PetCreateInput"];
      update: components["schemas"]["PetUpdateInput"];
      meta?: components["schemas"]["_Meta"];
    };
    PetDeleteUniqueArgs: {
      select?: components["schemas"]["PetSelect"];
      include?: components["schemas"]["PetInclude"];
      where: components["schemas"]["PetWhereUniqueInput"];
      meta?: components["schemas"]["_Meta"];
    };
    PetDeleteManyArgs: {
      where?: components["schemas"]["PetWhereInput"];
      meta?: components["schemas"]["_Meta"];
    };
    PetCountArgs: {
      select?: components["schemas"]["PetSelect"];
      where?: components["schemas"]["PetWhereInput"];
      meta?: components["schemas"]["_Meta"];
    };
    PetAggregateArgs: {
      where?: components["schemas"]["PetWhereInput"];
      orderBy?: components["schemas"]["PetOrderByWithRelationInput"];
      cursor?: components["schemas"]["PetWhereUniqueInput"];
      take?: number;
      skip?: number;
      _count?: boolean | components["schemas"]["PetCountAggregateInput"];
      _min?: components["schemas"]["PetMinAggregateInput"];
      _max?: components["schemas"]["PetMaxAggregateInput"];
      meta?: components["schemas"]["_Meta"];
    };
    PetGroupByArgs: {
      where?: components["schemas"]["PetWhereInput"];
      orderBy?: components["schemas"]["PetOrderByWithRelationInput"];
      by?: components["schemas"]["PetScalarFieldEnum"];
      having?: components["schemas"]["PetScalarWhereWithAggregatesInput"];
      take?: number;
      skip?: number;
      _count?: boolean | components["schemas"]["PetCountAggregateInput"];
      _min?: components["schemas"]["PetMinAggregateInput"];
      _max?: components["schemas"]["PetMaxAggregateInput"];
      meta?: components["schemas"]["_Meta"];
    };
    OrderCreateArgs: {
      select?: components["schemas"]["OrderSelect"];
      include?: components["schemas"]["OrderInclude"];
      data: components["schemas"]["OrderCreateInput"];
      meta?: components["schemas"]["_Meta"];
    };
    OrderFindUniqueArgs: {
      select?: components["schemas"]["OrderSelect"];
      include?: components["schemas"]["OrderInclude"];
      where: components["schemas"]["OrderWhereUniqueInput"];
      meta?: components["schemas"]["_Meta"];
    };
    OrderFindFirstArgs: {
      select?: components["schemas"]["OrderSelect"];
      include?: components["schemas"]["OrderInclude"];
      where?: components["schemas"]["OrderWhereInput"];
      meta?: components["schemas"]["_Meta"];
    };
    OrderFindManyArgs: {
      select?: components["schemas"]["OrderSelect"];
      include?: components["schemas"]["OrderInclude"];
      where?: components["schemas"]["OrderWhereInput"];
      meta?: components["schemas"]["_Meta"];
    };
    OrderUpdateArgs: {
      select?: components["schemas"]["OrderSelect"];
      include?: components["schemas"]["OrderInclude"];
      where: components["schemas"]["OrderWhereUniqueInput"];
      data: components["schemas"]["OrderUpdateInput"];
      meta?: components["schemas"]["_Meta"];
    };
    OrderUpdateManyArgs: {
      where?: components["schemas"]["OrderWhereInput"];
      data: components["schemas"]["OrderUpdateManyMutationInput"];
      meta?: components["schemas"]["_Meta"];
    };
    OrderUpsertArgs: {
      select?: components["schemas"]["OrderSelect"];
      include?: components["schemas"]["OrderInclude"];
      where: components["schemas"]["OrderWhereUniqueInput"];
      create: components["schemas"]["OrderCreateInput"];
      update: components["schemas"]["OrderUpdateInput"];
      meta?: components["schemas"]["_Meta"];
    };
    OrderDeleteUniqueArgs: {
      select?: components["schemas"]["OrderSelect"];
      include?: components["schemas"]["OrderInclude"];
      where: components["schemas"]["OrderWhereUniqueInput"];
      meta?: components["schemas"]["_Meta"];
    };
    OrderDeleteManyArgs: {
      where?: components["schemas"]["OrderWhereInput"];
      meta?: components["schemas"]["_Meta"];
    };
    OrderCountArgs: {
      select?: components["schemas"]["OrderSelect"];
      where?: components["schemas"]["OrderWhereInput"];
      meta?: components["schemas"]["_Meta"];
    };
    OrderAggregateArgs: {
      where?: components["schemas"]["OrderWhereInput"];
      orderBy?: components["schemas"]["OrderOrderByWithRelationInput"];
      cursor?: components["schemas"]["OrderWhereUniqueInput"];
      take?: number;
      skip?: number;
      _count?: boolean | components["schemas"]["OrderCountAggregateInput"];
      _min?: components["schemas"]["OrderMinAggregateInput"];
      _max?: components["schemas"]["OrderMaxAggregateInput"];
      meta?: components["schemas"]["_Meta"];
    };
    OrderGroupByArgs: {
      where?: components["schemas"]["OrderWhereInput"];
      orderBy?: components["schemas"]["OrderOrderByWithRelationInput"];
      by?: components["schemas"]["OrderScalarFieldEnum"];
      having?: components["schemas"]["OrderScalarWhereWithAggregatesInput"];
      take?: number;
      skip?: number;
      _count?: boolean | components["schemas"]["OrderCountAggregateInput"];
      _min?: components["schemas"]["OrderMinAggregateInput"];
      _max?: components["schemas"]["OrderMaxAggregateInput"];
      meta?: components["schemas"]["_Meta"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** @description Create a new User */
  createUser: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UserCreateArgs"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["User"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Find one unique User */
  findUniqueUser: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["User"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Find the first User matching the given condition */
  findFirstUser: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["User"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Find a list of User */
  findManyUser: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["User"][];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Update a User */
  updateUser: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UserUpdateArgs"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["User"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Update Users matching the given condition */
  updateManyUser: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UserUpdateManyArgs"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["BatchPayload"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Upsert a User */
  upsertUser: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UserUpsertArgs"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["User"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Delete one unique User */
  deleteUser: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["User"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Delete Users matching the given condition */
  deleteManyUser: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["BatchPayload"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Find a list of User */
  countUser: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: number | components["schemas"]["UserCountAggregateOutputType"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Aggregate Users */
  aggregateUser: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["AggregateUser"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Group Users by fields */
  groupByUser: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["UserGroupByOutputType"][];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Create a new Pet */
  createPet: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PetCreateArgs"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["Pet"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Find one unique Pet */
  findUniquePet: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["Pet"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Find the first Pet matching the given condition */
  findFirstPet: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["Pet"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Find a list of Pet */
  findManyPet: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["Pet"][];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Update a Pet */
  updatePet: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PetUpdateArgs"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["Pet"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Update Pets matching the given condition */
  updateManyPet: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PetUpdateManyArgs"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["BatchPayload"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Upsert a Pet */
  upsertPet: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PetUpsertArgs"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["Pet"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Delete one unique Pet */
  deletePet: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["Pet"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Delete Pets matching the given condition */
  deleteManyPet: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["BatchPayload"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Find a list of Pet */
  countPet: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: number | components["schemas"]["PetCountAggregateOutputType"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Aggregate Pets */
  aggregatePet: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["AggregatePet"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Group Pets by fields */
  groupByPet: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["PetGroupByOutputType"][];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Create a new Order */
  createOrder: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OrderCreateArgs"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["Order"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Find one unique Order */
  findUniqueOrder: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["Order"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Find the first Order matching the given condition */
  findFirstOrder: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["Order"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Find a list of Order */
  findManyOrder: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["Order"][];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Update a Order */
  updateOrder: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OrderUpdateArgs"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["Order"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Update Orders matching the given condition */
  updateManyOrder: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OrderUpdateManyArgs"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["BatchPayload"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Upsert a Order */
  upsertOrder: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OrderUpsertArgs"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["Order"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Delete one unique Order */
  deleteOrder: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["Order"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Delete Orders matching the given condition */
  deleteManyOrder: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["BatchPayload"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Find a list of Order */
  countOrder: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: number | components["schemas"]["OrderCountAggregateOutputType"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Aggregate Orders */
  aggregateOrder: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["AggregateOrder"];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
  /** @description Group Orders by fields */
  groupByOrder: {
    parameters: {
      query: {
        /** @description Superjson-serialized Prisma query object */
        q: string;
        /** @description Superjson serialization metadata for parameter "q" */
        meta?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            /** @description The Prisma response data serialized with superjson */
            data: components["schemas"]["OrderGroupByOutputType"][];
            /** @description The superjson serialization metadata for the "data" field */
            meta?: components["schemas"]["_Meta"];
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
      /** @description Request is forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["_Error"];
        };
      };
    };
  };
}
